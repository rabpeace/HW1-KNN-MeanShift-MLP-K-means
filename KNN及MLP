import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn import linear_model
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.neighbors import KNeighborsClassifier
from sklearn import datasets

np.random.seed(1)
x1=np.random.random((100,2))*10  
y1=np.ones((100,),dtype=int)   
#x1=np.random.randint(10,size=10)
#y1=np.random.randint(10,size=10)
#np.random.seed(2)
#x0=np.random.randint(10,size=10)*-1
#y0=np.random.randint(10,size=10)*-1
x0=np.random.random((100,2))*-10
y0=np.zeros((100,),dtype=int)  

x_train=np.concatenate((x0,x1)) #將x0 x1組合成一個陣列
y_train=np.concatenate((y0,y1))

clf=KNeighborsClassifier(n_neighbors=3, p=2, weights='distance', algorithm='brute') #使用KNN分類法
clf.fit(x_train,y_train) #訓練資料(將分類樣本輸入)

from keras.models import Sequential
from keras.layers import Dense

model=Sequential()
model.add(Dense(1,activation='tanh',input_dim=2))
model.add(Dense(2,activation='softmax'))

#model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

result=model.fit(x=x_train,y=y_train,epochs=100)

x_test=np.array([[-1,-1],[-3,-2],[-1,2],[0.1,0.1]])
y_test=np.array([0,0,1,1])
score=model.evaluate(x_test,y_test,batch_size=128)
plt.scatter(x1[:,0],x1[:,1],c="red")
plt.scatter(x0[:,0],x0[:,1],c="blue")
plt.scatter(x_test[:,0],x_test[:,1],c="black")
print("MLP預測",model.predict(x_test)) #keras 依照MLP設定 預測(x_test)所返回的準確度 取整數
print("KNN預測",clf.predict(x_test))
print("正0答案",y_test)
print("MLP得分",score[1])
print("KNN得分",clf.score(x_test,y_test))
